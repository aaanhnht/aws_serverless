Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: 
        ZipFile: |
          import datetime
          import json

          greetings = {
            "en": "hello",
            "fr": "bonjour",
            "de": "hallo",
            "it": "ciao",
            "vn": "xin chao",
            "es": "hola"
          }

          def lambda_handler(event, context):
            name = event["pathParameters"]["name"]
            
            if event["queryStringParameters"] is not None:
              if "lang" in event["queryStringParameters"]
                lang = event["queryStringParameters"]["lang"]
              else:
                lang = "en"
            else:
              lang = "en"

            if lang in greetings:
              message = f"{greetings[lang]}, {name}"
            else:
              message = f"{greetings['en']}, {name}"
            
            response = {
              "message"   : message,
              "info"      : event["queryStringParameters"],
              "timestamp" : datetime.datetime.now()
            }

            result = {
              "statusCode": 200,
              "headers"   : {
                "Access-Control-Allow-Origin": "*"
              }
              "body"      : json.dumps(response, default=str)
            }

      FunctionName: !Ref LambdaFunctionName
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRole.Arn

#  DynamoDBTable:

  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref APIName
    DependsOn:
      - LambdaFunction

  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart: message
    DependsOn:
      - APIGatewayRestAPI

  APIGatewayResourceName:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !Ref APIGatewayResource
      PathPart: "{name}"
    DependsOn:
      - APIGatewayResource

  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResourceName
      RequestValidatorId: !Ref ApiGatewayRequestValidator
      HttpMethod: GET
      AuthorizationType: NONE
      # RequestModels:
      #   Model: !Ref ApiGatewayModel
      RequestParameters: 
        method.request.querystring.lang: true  
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: GET
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
    DependsOn:
      - APIGatewayResourceName

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref APIGatewayRestAPI
      Schema: {}

  ApiGatewayRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      RestApiId: !Ref APIGatewayRestAPI
      ValidateRequestParameters: True

  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod

  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policty_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*' 


Parameters:
  APIName:
    Type: String
    Default: helloworld

  LambdaFunctionName:
    Type: String
    Default: greetings

  EnvironmentName:
    Type: String
    Default: Dev